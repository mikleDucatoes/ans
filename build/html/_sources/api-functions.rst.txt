Подробное описание API
======================

GET:
-----

 .. note::
    Сигнатуры методов должны содержать обязательный параметр – подпись Sig.
    Sig – представляет собой набор символов в формате UTF-8.

* метод для получения информации об объеме налитого в iWine вина:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 Сигнатура метода
    ``float  getVolume({‘response_form’:‘единицы измерения’, ‘Sig’:’value’,})``
     float - 2 знака после запятой
     в метод передаем на вход либо pr – процент заполнения емкости iWine.
     Так как запросы обрабатываются асинхронно, то следует учесть время ожидания отклика от сервера – latency.

* метод для получения информации о содержании алкоголя в вине, налитом в iWine:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 Сигнатура метода
    ``float getAlcohol({‘response_form’:‘единицы измерения – ‘ppm’ – промилле, либо ‘mg/L’’, ‘Sig’:’value’,})``
     float - 2 знака после запятой
     Так как запросы обрабатываются асинхронно, то следует учесть время ожидания отклика от сервера – latency.

* метод для получения информации о содержании сахара в вине, налитом в iWine:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 Сигнатура метода
    ``uint  getSugar({‘response_form’:‘единицы измерения – ‘Blg’ – градус Баллинга, ’, ‘Sig’:’value’,})``
     unsigned int – беззнаковое целое
	 градус Баллинга – единица концентрации массовой доли сухих веществ в растворе.
     Так как запросы обрабатываются асинхронно, то следует учесть время ожидания отклика от сервера – latency.

* метод для получения информации о текущем значении температуры вина, налитого в iWine:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 Сигнатура метода
    ``float getCurrentTemperature({‘response_form’:‘единицы измерения – C – градус Цельсия, K – градус Кельвина’, ‘Sig’:‘value’,})``
	
    float - 2 знака после запятой
     градус Кельвина – единица наиболее привычная в технических документах, градусы Цельсия gKel=gCels+273.

* метод для получения информации о цвете вина, налитого в iWine:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

 Сигнатура метода
    ``string getTypeOfWine({‘truth_level’:‘h - коэффициент достоверности двойной точности (double) ’, ‘Sig’:’value’,})``
	 string - тип выходного параметра, который принимает одно из значений множества: {teinturier – красное, blanc-de-noirs – белое, blush – розовое вино, ‘ramato’ – оранжевое вино}. Регулируя значение уровня h, производится настройка алгоритмов машинного обучения.
	 Так как запросы обрабатываются асинхронно, то следует учесть время ожидания отклика от сервера – latency.

POST:
-----

* асинхронный метод регуирования температуры вина:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      ``int setAsincTemRegulare([‘dT’:’t’, ‘Sig’])``
	 Eсли метод принят в обработку, и поставлен в очередь, то вернется ответ 200 и номер в очереди. 
	 dT если значение t<0 – то идет процесс охлаждения относительно текущего значения температуры вина, если t>0 – то происходит процесс нагревания вина,  НО! Важно помнить, что метод вернет ошибку, в случае, если на момент запроса объем вина в iWine менее 30%.
	 Тогда, вы получите ответ от http-Сервера 200, и код ошибки (недостаточно объема) – 64375. 

* асинхронный метод регуирования температуры вина:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

	  ``int setAsincMixWine([‘time’:’t’, ‘Sig’])`` 
	 Если метод принят в обработку, и поставлен в очередь, то  вернется ответ 200 и номер в очереди.
	 T – значение времени взбалтывания для насыщения вина воздухом в минутах, максимальное значние 60, минимальное значение 7.
	 .. danger::
		Важно помнить, что метод вернет ошибку 254 в случае 100% заполнения iWine.
		В случае полного объема, возможен разлив вина при взбалтывании. Воизбежание этого события, метод вернет ошибку 365
		А при 30% заполнении графина iWine будет передан код ошибки –-270, так как данного объема вина не достаточно для взбалтывания.
